<?php
namespace App\Controllers;
use CodeIgniter\Controller;
use App\Models\Usuarios_model;
use App\Models\Producto_Model;
use App\Models\Ventas_cabecera_model;
use App\Models\Ventas_detalle_model;
use CodeIgniter\Config\Services; // Asegúrate de que esto esté presente

// Si estás usando CodeIgniterCart, asegúrate de que la clase Cart esté correctamente cargada.
// Podría ser: use CodeIgniterCart\Cart; si es un namespace o un servicio.
// Si es una clase global que incluyes con require, no necesita 'use'.

class Ventas_controller extends Controller
{
    public function registrar_venta()
    {
        $productoModel = new Producto_Model();
        require(APPPATH . 'Controllers/carrito_controller.php');
        $cartController = new \carrito_controller(); 
        
        $carrito_contents = $cartController->devolver_carrito();
        $ventasModel = new Ventas_cabecera_model();
        $detalleModel = new Ventas_detalle_model();
        $productos_validos = [];
        $productos_sin_stock = [];
        $total = 0;
        $session = Services::session();

        if (!$session->has('id_usuario')) {
            $session->setFlashdata('mensaje', 'Debe iniciar sesión para finalizar la compra.');
            return redirect()->to(base_url('login'));
        }
        
        // Validar stock y filtrar productos válidos
        foreach ($carrito_contents as $item) {
            // **CORRECCIÓN:** Usa find() para obtener un producto por ID en CodeIgniter Model
            $producto = $productoModel->find($item['id']);

            if ($producto && $producto['stock'] >= $item['qty']) {
                $productos_validos[] = $item;
                $total += $item['subtotal'];
            } else {
                $productos_sin_stock[] = $item['name'];
                // Eliminar del carrito el producto sin stock
                $cartController->eliminar_item($item['rowid']);
            }
        }

        // Si hay productos sin stock, avisar y volver al carrito
        if (!empty($productos_sin_stock)) {
            $mensaje = 'Los siguientes productos no tienen stock suficiente y fueron eliminados del carrito: <br>' 
                         . implode(', ', $productos_sin_stock);
            $session->setFlashdata('mensaje', $mensaje);
            return redirect()->to(base_url('carrito'));
        }

        // Si no hay productos válidos, no se registra la venta
        if (empty($productos_validos)) {
            $session->setFlashdata('mensaje', 'No hay productos válidos para registrar la venta.');
            return redirect()->to(base_url('carrito'));
        }

        // Registrar cabecera de la venta
        $nueva_venta = [
            'usuario_id'    => $session->get('id_usuario'),
            'total_venta'   => $total
        ];
        $venta_id = $ventasModel->insert($nueva_venta);
        
        // Registrar detalle y actualizar stock
        foreach ($productos_validos as $item) {
            $detalle = [
                'venta_id'      => $venta_id,
                'producto_id'   => $item['id'],
                'cantidad'      => $item['qty'],
                'precio'        => $item['price']
            ];
            $detalleModel->insert($detalle);
        
            $producto = $productoModel->find($item['id']);
            $productoModel->update($item['id'], ['stock' => $producto['stock'] - $item['qty']]);
        }
        
        // Vaciar carrito y mostrar confirmación
        $cartController->borrar_carrito();
        $session->setFlashdata('mensaje', 'Venta registrada exitosamente.');
        return redirect()->to(base_url('principal'));
    }

    // Función del usuario cliente para ver sus compras (no la modificamos, solo la reubicamos)
    public function ventas()
    {
        $detalleModel = new Ventas_detalle_model();            
        $session = Services::session(); // Obtener la sesión para el usuario actual
        $id_usuario = $session->get('id_usuario'); // Asumiendo que el ID del usuario está en la sesión
        
        if (!$id_usuario) {
            return $this->response->setJSON(['error' => 'Usuario no autenticado'])->setStatusCode(401);
        }

        $ventas = $detalleModel->getDetallePorVentaDeUsuario($id_usuario); // <- Necesitas este método en Ventas_detalle_model

        $ventasCabeceraModel = new Ventas_cabecera_model();
        $ventasUsuario = $ventasCabeceraModel->getVentas($id_usuario); // Usamos tu método existente

        $resultado = [];
        foreach ($ventasUsuario as $ventaCabecera) {
            $detallesDeVenta = $detalleModel->getDetallePorVenta($ventaCabecera['id']); // Obtener detalles por ID de venta

            foreach ($detallesDeVenta as $detalle) {
                $resultado[] = [
                    'fecha'     => $ventaCabecera['fecha'], // Fecha de la cabecera
                    'producto'  => $detalle['producto'],
                    'cantidad'  => $detalle['cantidad'],
                    'precio'    => number_format($detalle['precio'], 2),
                    'total'     => number_format($detalle['precio'] * $detalle['cantidad'], 2)
                ];
            }
        }
        return $this->response->setJSON($resultado);
    }

    // ---  FUNCIÓN PARA EL ADMINISTRADOR ---
    public function mostrarTodasLasVentasAdmin()
    {
        $session = Services::session();
        if (!$session->get('logged_in') || $session->get('perfil_id') != 1) { 
            return redirect()->to(base_url('login'))->with('mensaje', 'Acceso denegado. Solo administradores.');
        }

        $ventasCabeceraModel = new Ventas_cabecera_model();
        $ventasDetalleModel = new Ventas_detalle_model();
        $productoModel = new Producto_Model(); // Para obtener el nombre del producto
        $usuarioModel = new Usuarios_model(); // Para obtener el nombre del cliente

        // Obtener todas las ventas de la cabecera usando tu método `getVentas` sin ID
        $ventasCabecera = $ventasCabeceraModel->getVentas(); // Esto usará getBuilderVentas_cabecera()

        // Crear un array para almacenar las ventas con todos sus detalles
        $data['ventas'] = [];

        foreach ($ventasCabecera as $venta) {
            $ventaData = [
                'id' => $venta['id'],
                'fecha' => $venta['fecha'],
                'total_venta' => $venta['total_venta'],
                'usuario_id' => $venta['usuario_id'],
                'nombre_cliente' => $venta['nombre'] . ' ' . $venta['apellido'], // Nombres del JOIN de getVentas
                'detalles' => []
            ];

            // Obtener los detalles de la venta actual usando tu método `getDetallePorVenta`
            // getDetallePorVenta ya hace el join con productos y trae `nombre` como `producto`
            $detalles = $ventasDetalleModel->getDetallePorVenta($venta['id']);
            
            // Adjuntar los detalles a la venta
            $ventaData['detalles'] = $detalles;
            $data['ventas'][] = $ventaData;
        }

        $data['Titulo'] = 'Listado Completo de Ventas';
        
        // Carga el header, la vista de ventas y el footer
        echo view('front/head_view', $data); // Asume que tienes un header
        echo view('front/navbar', $data);
        echo view('back/ventas/Muestra_ventas_admin', $data); // Usaremos un nombre de vista diferente para evitar conflictos con la del cliente
        echo view('front/footer_view'); // Asume que tienes un footer
    }
}